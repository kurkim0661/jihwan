Language-Level solution
  -Monitor
High-level Mechanism
  -Monitor
    -공유 데이터와 Critical section의 집합
    -Conditional variable
      -wait(), signal() operations
      
    Monitor의 구조
      -Entry queue(진입 큐)
        -모니터 내의 procedure 수만큼 존재
      -Mutual exclusion
        -모니터 내에는 항상 하나의 프로세스만 진입 가능
      -Information hiding(정보 은폐)
        -공유 데이터는 모니터 내의 프로세스만 접근 가능
      -Condition queue(조건 큐)
        -모니터 내의 특정 이벤트를 기다리는 프로세스가 대기
      -Signaler queue(신호제공자 큐)
        -모니터에 항상 하나의 신호제공자 큐가 존재
        -signal() 명령을 실행한 프로세스가 임시 대기
    
    -자원 할당 문제
      monitor resourceRiAllocator;
      var RilsAvailable : boolean,
          RilsFree : condition;
      procedure requestR();
      begin
        if(-R Available)then
          R_Free.wait();
        R_Available <- false;
      end;
      procedure releaseR();
      begin
        R_Available <- true;
        R_Free.signal();
      end;
      
      begin
        RilsAvailable <- true;
      end.
      
    -자원 할당 시나리오
      -자원 R 사용 가능
      -Monitor 안에 프로세스가 없음.
      
      -프로세스Pj가 모니터 안에서 자원R을 요청
      
      -자원R이 Pj에게 할당됨
      -프로세스 Pk가 R요청, Pm또한 R요청
      
      -자원R이 PK에게 할당됨
      -PJ가 모니터 안으로 돌아와서, 남은 작업 수행
      
      
    -Producer-Consumer Problem
      monitor ringbuffer;
      var buffer : array[0..N-1] of message,
          validBufs : 0..N,
          in : 0..N-1,
          out : 0..N-1,
          vufHasData, bufHasSpace : condition;
          
      procedure fillBuf(data : message);
      begin
        if(validBufs = N) then bufHasSpace.wait();
        buffer[in] <= data;
        validBufs <- validBufs + 1;
        in <- (in + 1) mod N;
        vufHasData.signal();
      end;
      
      procedure emptyBuf(var data : message):
      begin
        if(validBufs = 0) then bufHasData.wait();
        data <- buffer[out];
        validBufs <- validBufs -1;
        out <- (out + 1) mod N;
        bufHasSpace.signal();
      end;
      
      begin
        validBufs <- 0;
        in <- 0;
        out <- 0;
      end
      
    -Reader-Writer Problem
      -reader/writer
      
      
    -Dining philosopher problem
      -5명의 철학자
      -철학자들은 생각하는 일, 스파게티 먹는 일만 반복함
      -공유 자원: 스파게티, 포크
      -스파게티를 먹기 위해서는 좌우 포크 2개 모두 들어야함.
      
      do forever
        pickup(i);
        eating;
        putdown(i)
        thinking;
      end.
      
      monitor dinig_philosophers;
      var numForks : array[0..4] of integer,
          ready : array[0..4] of condition,
          i : integer;
          
      procedure pickup(me);
      var
        me : integer;
      begin 
        if(numForks[me] != 2) then ready[me].wait();
        numForks[right(me)] <- numForks[right(me)] - 1;
        numForks[left(me)] <- numForks[left(me)] - 1;
      end;
      
      procedure putdown(me);
      var
        me : integer;
      begin
        numForks[right(me)] <- numForks[right(me)] + 1;
        numForks[left(me)] <- numForks[left(me)] + 1;
        if(numForks[right(me)] = 2) then ready(right((me)].signal();
        if(numForks(left(me)] = 2) then ready(left(me)].signal();
      end;
      
      begin
        for i <- 0 to 4 do
          numForks[i] <- 2;
      end;
      
      -장점
        -사용이 쉽다
        -Deadlock 등 error발생 가능성이 낮음
      -단점
        -지원하는 언어에서만 사용 가능
        -컴파일러가 os를 이해하고 있어야 함
          -Critical section 접근을 위한 코드 생성
          
      
      
  -Language-level construct
