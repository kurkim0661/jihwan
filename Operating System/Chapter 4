프로세스 동기화 & 상호배제

Process Synchronization(동기화)
-다중 프로그래밍 시스템
  -여러 개의 프로세스들이 존재
  -프로세스들은 서로 독립적으로 동작
  -공유 자원 또는 데이터가 있을 때, 문제 발생 가능
-동기화(Synchronization)
  -프로세스들이 서로 동작을 맞추는 것.
  -프로세스 들이 서로 정보를 공유 하는 것.
 Asynchronous and Concurrent P's
 -비동기적(Asynchronous)
  -프로세스들이 서로에 대해 모름
-병행적(Concurrent) 
  -여러 개의 프로세스들이 동시에 시스템에 존재
-병행 수행중인 비동기적 프로세스들이 공유
 자원에 동시 접근 할 때 문제가 발생 할 수 있음.
 

Terminologies
-Shared data(공유 데이터) or Critical data
  -여러 프로세스들이 공유하는 데이터
-Critical section(임계 영역)
  -공유 데이터를 접근하는 코드 영역(code segment)
  
-Mutual exclusion(상호배제)
  -둘 이상의 프로세스가 동시에 critical section에 진입하는 것을 막는 것
  
  
Critical Section
-기계어 명령의 특성
  -Atomicaly(원자성), Indivisible(분리 불가능)
  -한 기계어 명령의 실행 도중에 인터럽트 받지 않음

Race condition
-순서에 따라 결과가 달라질 수 있다.

Mutual Exclusion Methods
-Mutual exclusion primitives(기본이 되는 연산... 이란 뜻)
  -enterCS() primitive
    -Critical section 진입 전 검사
    -다른 프로세스가 critical section 안에 있는지 검사
  -exitCS() primitive
    -Critical section을 벗어날 때의 후처리 과정
    -Critical section을 벗어남을 시스템이 알림.
    
Requirements for ME primitives
-Mutual exclusion(상호 배제)
-Progress(진행)
  -CS안에 있는 프로세스 외에는, 다른 프로세스가 CS에 진입하는 것을 방해 하면 안됨
-Bounded waitin(한정 대기)
  -프로세스의 cs진입은 유한시간 내에 허용되어야 함.
  
Mutual Exclusion Solution
-Dekker's Algorithm
  -Two process ME을 보장하는 최초의 알고리즘 
   flag와 turn 두가 지를 사용.
   
-N-Process Mutual Exclusion
  -다익스트라
    -최초의 프로세스 n개의 알고리즘...
    flag[] 값           의미
    idle            프로세스가 임계지역 진입을 시도하고 있지 않을 때
    want-in         프로세스의 임계 지역 진입 시도 1단계 일 때
    in-CS           프로세스의 임계 지역 진입 시도 2단계
    
    repeat
    flag[i] <- want-in;
    while(turn != i) do
      if(flag[turn] = idle) then
      trun <-i;
    endwhile;
    
    flag[i] <- in-CS
    j<-0;
    while(j<n) and (j=i or flag[j] != in-CS)) do
      j<-j+1;
    endwhile;
    
    until(j>=n);
    flag[i]<-idle;
    
SW solution
-SW solution들의 문제점
  -속도가 느림
  -구현이 복잡한
  -ME primitive 실행 중 preemptive될 수 있음
    -공유 데이터 수정 중은 interrupt를 억제 함으로서 해결 가능
      -Overhead 발생
    -busy waiting
      -Inefficient

OS supported SW solutions
Spinlock
-정수 변수
-초기화, P(), V() 연산으로만 접근 가능
  -위 연산들은 indivisible(or atomic)연산
    -OSsupport
    -전체가 한 instruction cycle에 수행 됨
    
ex) P(S) {
      while(S<=0) do
      endwhile;
      S<-S-1;
    }
    
    V(S) {
      S<-S+1;
    }

-멀티 프로세서 시스템에서만 사용 가능
-Busy waiting! 

Semaphore
-음이 아닌 정수형 변수(s)
  -초기화 연산, P(), V()
    로만 접근 가능
      -P: Probern(검사)
      -v: verhogen(증가)
-임의의 s변수 하나에
 ready queue 하나가 할당 됨
 
-Binary semaphore
  -S가 0과 1 두 종류의 값만 갖는 겨우
  -상호배제나 프로세스 동기화의 목적으로 사용
-Counting semaphore
  -S가 0이상의 정수값을 가질 수 있는 겨우
  -Producer-Consumer 문제 등을 해결하기 위해 사용
    -생산자-소비자 문제
    
-초기화 연산 
  -S 변수에 초기값을 부여하는 연산
-P()연산, V()연산

1) P(S)연산
if(S>0) 
then S<-S-1;
else wait on the queue Q;

2)V(S) 연산
if(어떤..? waiting processes on Q) 
then wakeup one of them;
else S<-S + 1;

-모두 indivisible 연산
  -OS support
  -전체가 한 instruction cycle에 수행 됨.
  
-Process synchronization
  -Process들의 실행 순서 맞추기
    -프로세스들은 병행적이며, 비동기적으로 수행
    
-Producer-Consumer problem
  -생산자 프로세스
    -메시지를 생성하는 프로세스 그룹
  -소비자 프로세스
    -메세지 전달받는 프로세스 그룹
Single buffer
(shared variables)
var consumed : semaphore <-1;
    produced : semaphore <- 0;
    buffer : message;
    
Producer Pi -> buffer

repeat
  ...
  create a new message M;
  P(consumed);
  buffer <- M;
  V(produced);
  ...
until(false)

buffer -> Consumer Cj

repeat
  ...
  P(produced);
  m <- buffer;
  V(consumed);
  consume the message m;
  ...
until(false);

N-buffer(circuler queue)
(shared variables)
var nrfull : semaphore <- 0,
    nrempty : semaphore <- N,
    mutexP : semaphore <-1,
    mutexC : semaphore <- 1,
    buffer : array[0..N-1] of message;
    in, out : 0..N-1 <- 0,0;

Producer Pi -> buffers
repeat
  ...
  create a new message M;
  P(mutexP);
  P(nrempty);
  buffer[in] <- M;
  in <- (in + 1) mod N;
  V(nrfull);
  V(mutexP);
  ...
until(false);
  
buffers -> Consumer Cj

repeat
  ...
  P(mutexC);
  P(nrfull);
  m <- buffer[out];
  out <- (out + 1) mod N;
  V(nrempty);
  V(mutexC);
  ...
until(false);
  
-Reader-Writer problem
  -Reader
    -데이터에 대해 읽기 연산만 수행
  -Writer
    -데이터에 대해 갱신 연산을 수행
  -데이터 무결성 보장 필요
    -Reader들은 동시에 데이터 접근 가능
    -Writer들은 (또는 reader와 write)이 동시 데이터 접근시,
     상호배제(동기화)필요
   -해결법
    -reader/writer 에 대한 우선권 부여
      -reader preference solution
      -writer preference solution
      
var wmutex, rmutex: semaphore:=1, 1,
    nreaders : integer:=0

Reader preference!!!

Reader Ri
repeat
....
P(rmutex);
if(nreaders = 0) then
  P(wmutex);
endif;
nreaders <- nreaders + 1;
V(rmutex);
Perform read operations;
P(rmutex);
nreaders <- nreaders - 1;
if(nreaders = 0) then
  V(wmutex);
endif;
V(rmutex);
...
until(false);

Writer Wj
repeat
...
P(wmutex);
Perform write operations
V(wmutex);
...
until(false);

-No busy waiting
  -기다려야 하는 프로세스는 block(asleep)상태가 됨
-Semaphore queue에 대한 wake-up 순서는 비결정적
  -Starvation problem.
