프로세스 동기화 & 상호배제

Process Synchronization(동기화)
-다중 프로그래밍 시스템
  -여러 개의 프로세스들이 존재
  -프로세스들은 서로 독립적으로 동작
  -공유 자원 또는 데이터가 있을 때, 문제 발생 가능
-동기화(Synchronization)
  -프로세스들이 서로 동작을 맞추는 것.
  -프로세스 들이 서로 정보를 공유 하는 것.
 Asynchronous and Concurrent P's
 -비동기적(Asynchronous)
  -프로세스들이 서로에 대해 모름
-병행적(Concurrent) 
  -여러 개의 프로세스들이 동시에 시스템에 존재
-병행 수행중인 비동기적 프로세스들이 공유
 자원에 동시 접근 할 때 문제가 발생 할 수 있음.
 

Terminologies
-Shared data(공유 데이터) or Critical data
  -여러 프로세스들이 공유하는 데이터
-Critical section(임계 영역)
  -공유 데이터를 접근하는 코드 영역(code segment)
  
-Mutual exclusion(상호배제)
  -둘 이상의 프로세스가 동시에 critical section에 진입하는 것을 막는 것
  
  
Critical Section
-기계어 명령의 특성
  -Atomicaly(원자성), Indivisible(분리 불가능)
  -한 기계어 명령의 실행 도중에 인터럽트 받지 않음

Race condition
-순서에 따라 결과가 달라질 수 있다.

Mutual Exclusion Methods
-Mutual exclusion primitives(기본이 되는 연산... 이란 뜻)
  -enterCS() primitive
    -Critical section 진입 전 검사
    -다른 프로세스가 critical section 안에 있는지 검사
  -exitCS() primitive
    -Critical section을 벗어날 때의 후처리 과정
    -Critical section을 벗어남을 시스템이 알림.
    
Requirements for ME primitives
-Mutual exclusion(상호 배제)
-Progress(진행)
  -CS안에 있는 프로세스 외에는, 다른 프로세스가 CS에 진입하는 것을 방해 하면 안됨
-Bounded waitin(한정 대기)
  -프로세스의 cs진입은 유한시간 내에 허용되어야 함.
  
Mutual Exclusion Solution
-Dekker's Algorithm
  -Two process ME을 보장하는 최초의 알고리즘 
   flag와 turn 두가 지를 사용.
   
-N-Process Mutual Exclusion
  -다익스트라
    -최초의 프로세스 n개의 알고리즘...
    flag[] 값           의미
    idle            프로세스가 임계지역 진입을 시도하고 있지 않을 때
    want-in         프로세스의 임계 지역 진입 시도 1단계 일 때
    in-CS           프로세스의 임계 지역 진입 시도 2단계
    
    repeat
    flag[i] <- want-in;
    while(turn != i) do
      if(flag[turn] = idle) then
      trun <-i;
    endwhile;
    
    flag[i] <- in-CS
    j<-0;
    while(j<n) and (j=i or flag[j] != in-CS)) do
      j<-j+1;
    endwhile;
    
    until(j>=n);
    flag[i]<-idle;
    
SW solution
-SW solution들의 문제점
  -속도가 느림
  -구현이 복잡한
  -ME primitive 실행 중 preemptive될 수 있음
    -공유 데이터 수정 중은 interrupt를 억제 함으로서 해결 가능
      -Overhead 발생
    -busy waiting
      -Inefficient
  
