교착상태.
Deadlock의 개념
-Blocked/Asleep state
  -프로세스가 특정 이벤트를 기다리는 상태
  -프로세스가 필요한 자원을 기다리는 상태
  
-Deadlock state
  -프로세스가 발생 가능성이 없는 이벤트를 기다리는 경우
    -프로세스가 deadlock 상태에 있음
  -시스템 내에 deadlcok에 빠진 프로세스가 있는 경우
    -시스템이 deadlock 상태에 있음.
    
deadlcoked은 asleep상태에 있다..
starvation ready state에 존재!! 언젠가 발생됨!

-일반적 분류
  -Hardware resources vs Software resources
  
-다른 분류 법
  -선점 가능 여부에 따른 분류
  -할당 단위에 따른 분류
  -동시 사용 가능 여부에 따른 분류
  -재사용 가능 여부에 따른 분류
  
-Preemptible resources
  -선점 당한 후, 돌아와도 문제가 발생하지 않는 자원
  -Processorm, memory 등
  
-Non-preemptible resources
  -선점당하면, 이후 진행에 문제가 발생하는 자원
    -Rollback, restart등 특별한 동작이 필요
  -E,g disk drive 등
 
-Total allocation resources
  -자원 전체를 프로세스에게 할당
  -E.g., Processor, disk drive 등
-Partitioned allocation resources
  -하나의 자원을 여로 조각으로 나누어, 여러 프로세스들에게 할당
  -E.g.,, Memory등
  
-Exclusive allocation resources
  -한 순간에 한 프로세스만 사용 가능한 자원
  -E.g., Processor, memory, disk drive 등
-Shared allocation resource
  -여러 프로세스가 동시에 사용 가능한 자원
  -E.g., program(sw), shared data 등
  
-SR(Serially-reusable Resources)
  -시스템 내에 항상 존재 하는 자원
  -사용이 끝나면, 다른 프로세스가 사용 가능
  -E.g., Processor, memory, disk drive, program 등
-CR(Consumable Resources)
  -한 프로세스가 사용한 후에 사라지는 자원
  -E.g., signal, message 등
  
Deadlock과 자원의 종류
-Deadlock을 발생시킬 수 있는 자원의 형태
  -Non-preemptible resources
  -Exclusive allocation resources
  -Serially reusable resources
  *할당 단위는 영향을 미치지 않음
-CR을 대상으로 하는 Deadlock model
  -너무 복잡


Deadlock 예제

Graph Model
-Node
  -프로세스 노드(P1,P2), 자원 노드(R1, R2)
-Edge
  -Rj->Pi : 자원 Rj 이 프로세스 Pi에 할당 됨
  -Pi->Rj : 프로세스 Pi가 자원 Rj을 요청(대기 중)
  
Deadlock 발생 필요 조건
자원의 특성
-Exclusive use of resources
-Non-preemptible resources
프로세스의 특성
-Hold and wait(Partial allocation)
  -자원을 하나 hold하고 다른 자원 요청
-Circular wait

Deadlock 해결 방법
-Deadlock prevention methods
  -교착상태 예방
-Deadlock avoidance method
  -교착상태 회피
-Deadlock detection and deadlock recovery methods
  -교착상태 탐지 및 복구
  
Deadlcok Prevection
  -4개의 deadlock 발생 필요 조건 중 하나를 제거
    -모든 자원을 공유 허용
      -Exclusive use of resources 조건 제거
      -현실적으로 불가능
    
    -모든 자원에 대해 선점 허용
      -Non-preemptible resources 조건 제거
      -현실적으로 불가능
      -유사한 방법
        -프로세스가 할당 받을 수 없는 자원을 요청한 경우, 기존에
          가지고 있던 자원을 모두 반납하고 작업 취소
        -심각한 자원 낭비 발생 -> 비현실적...
    
    -필요 자원 한번에 모두 할당(Total allocation)
      -Hold and wait 조건 제거
      -자원 낭비 발생
        -필요하지 않은 순간에도 가지고 있음
      -무한 대기 현상 발생 가능
      
    -Circular wait 조건 제거
      -Totally allocation을 일반화 한 방법
      -자원들에게 순서를 부여
      -프로세스는 순서의 증가 방향으로만 자원 요청 가능
      -자원 낭비 발생
    
Deadlock avoidance method
  -시스템의 상태를 계속 감시
  -시스템이 deadlock 상태가 될 가능성이 있는 자원 할당 요청 보류
  -시스템을 항ㄷ상 safe state로 유지.
  
  -Safe state
    -모든 프로세스가 정상적 종료 가능한 상태
    -Safe sequence가 존재
      -Deadlock상태가 되지 않을 수 있음을 보장
      
  -Unsafe state
    -Deadlock 상태가 될 가능성이 있음.
    -반드시 발생한다는 의미는 아님.
    
  -가정
    -프로세스의 수가 고정됨
    -자원의 종류와 수가 고정됨
    -프로세스가 요구하는 자원 및 최대 수량을 알고 있음
    -프로세스는 자원을 사용후 반드시 반납한다.
    
  -Not practical...
  
  -Dijkstra's banker's algorithm
    -Deadlock avoidance를 위한 간단한 이론적 기법
    -가정
      -한 종류의 자원이 여러개(unit)
    -시스템을 항상 safe state로 유지
    
  -Habermaann's algorithm
    -Dijkstra's algorithm의 확정
    -여러 종류의 자원 고려
    -시스템을 항상 safe state로 유지

  -Deadlock을 막을 수 있음
  -시스템을 항상 감시..
  -Low resource utilization
  -Not practical
    -가정
      -프로세스 수, 자원 수가 고장
      -필요한 최대 자원 수를 알고 있음.

