스레드 관리 (Thread Management)

Thread의 개념

프로세스는 자원과 제어로 이루어져 있다고 할 수 있다. 여기서 제어만 가저간 것을 thread라 할 수 있다. ~ << 이게 쓰레드를 표현.

스레드는 코드,전역 데이터, 힙을 공유하고있다. (자원 공유)

  -Light Weight Proocess( LWP)
  -프로세서 활용의 기본 단위
  -구성요소
    -Thread ID
    -Register set(PC등)
    -Stack
  -제어 요소 외 코드, 데이터 및 자원들은 프로세스
   의 다른 스레드 들과 공유.
  -전통적 프로세스 = 단일 스레드 프로세스
  다중처리와 다중 스레드의 차이는 자원공유에 있다.
  
스레드 장점
-사용자 응답성(Rsponsiveness)
  -일부 스레드의 처리가 지연되어도, 다른 스레드는 작업을 계속 처리가능
-자원 공유(Resource sharing)
  -자원을 공유해서 효율성 증가(커널의 개입을 피할 수 있음)
    -EX) 동일 address space에서 스레드 여러 개
-경제성(Economy)
  -프로세스의 생성, context switch에 비해 효율적
-멀티 프로세서 활용
  -병렬처리를 통해 성능 향상.
  
스레드의 구현
  -사용자 수준 스레드(User threads)
    -pthread와 같은것... library...
    -커널은 스레드의 존재를 모름
      -커널의 관리를 받지 않음.
        -생성 및 관리의 부하가 적음, 유연한 관리 가능
        -이식성이 높음.
    -커널은 프로세스 단위로 자원 할당
      -하나의 스레드가 block 상태가 되면, 모든 스레드가 대기.
  
  -커널 수준 스레드(Kernel threads)
    -OS이 직접관리
    -커널 영역에서 스레드의 생성, 관리 수행
      -Context switching등 부하가 큼.
    -커널이 각 스레드를 개별적으로 관리
      -프로세스 내 스레드들이 병행 수행 가능
        -하나의 스레드가 blcok상태가 되어도, 다른 스레드는 계속 작업 수행 가능.

    -혼합형 스레드
    
